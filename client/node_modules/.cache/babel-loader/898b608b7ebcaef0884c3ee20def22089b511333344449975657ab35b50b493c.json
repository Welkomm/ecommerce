{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Smiley\\\\Documents\\\\GitHub\\\\website_testing\\\\client\\\\src\\\\components\\\\Orders.js\",\n  _s = $RefreshSig$();\n// src/components/Orders.js\nimport React, { useState, useEffect } from 'react';\nimport './Orders.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Orders = () => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  useEffect(() => {\n    const fetchOrders = async () => {\n      const username = localStorage.getItem(\"username\");\n      if (username) {\n        try {\n          const response = await fetch(`http://localhost:3000/orders/${username}`);\n          const data = await response.json();\n          // Check if data.orders exists and is an array before setting it\n          if (data.orders && Array.isArray(data.orders)) {\n            setOrders(data.orders);\n          } else {\n            // Handle the case where data.orders is not as expected\n            console.error(\"Unexpected response format:\", data);\n            setOrders([]); // Ensure orders is always an array\n          }\n        } catch (error) {\n          console.error(\"Error fetching orders:\", error);\n          setOrders([]); // Ensure orders is always an array\n        }\n      }\n    };\n    fetchOrders();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"orders-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), orders.length > 0 ? orders.map((order, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"order-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Order ID: \", order.orderID]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Date Ordered: \", order.orderDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Status: \", order.orderStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Products:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: order.products.map((product, index) => {\n          const [productName, productId] = product.split(' (');\n          const id = productId.slice(0, -1); // Remove closing parenthesis\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `/product/${id}`,\n              children: [productName, \" (\", id, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 41\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Products: \", order.productIDs.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No orders found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(Orders, \"FvMuVccH6DXI6fqfhJiN/VsjZaw=\");\n_c = Orders;\nexport default Orders;\nvar _c;\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Orders","_s","orders","setOrders","fetchOrders","username","localStorage","getItem","response","fetch","data","json","Array","isArray","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","order","index","orderID","orderDate","orderStatus","products","product","productName","productId","split","id","slice","href","productIDs","join","_c","$RefreshReg$"],"sources":["C:/Users/Smiley/Documents/GitHub/website_testing/client/src/components/Orders.js"],"sourcesContent":["// src/components/Orders.js\nimport React, { useState, useEffect } from 'react';\nimport './Orders.css';\n\nconst Orders = () => {\n    const [orders, setOrders] = useState([]);\n\n    useEffect(() => {\n        const fetchOrders = async () => {\n            const username = localStorage.getItem(\"username\");\n            if (username) {\n                try {\n                    const response = await fetch(`http://localhost:3000/orders/${username}`);\n                    const data = await response.json();\n                    // Check if data.orders exists and is an array before setting it\n                    if (data.orders && Array.isArray(data.orders)) {\n                        setOrders(data.orders);\n                    } else {\n                        // Handle the case where data.orders is not as expected\n                        console.error(\"Unexpected response format:\", data);\n                        setOrders([]); // Ensure orders is always an array\n                    }\n                } catch (error) {\n                    console.error(\"Error fetching orders:\", error);\n                    setOrders([]); // Ensure orders is always an array\n                }\n            }\n        };\n\n        fetchOrders();\n    }, []);\n\n    return (\n        <div className=\"orders-container\">\n            <h1>Your Orders</h1>\n            {orders.length > 0 ? (\n                orders.map((order, index) => (\n                    <div key={index} className=\"order-item\">\n                        <h2>Order ID: {order.orderID}</h2>\n                        <p>Date Ordered: {order.orderDate}</p>\n                        <p>Status: {order.orderStatus}</p>\n                        <p>Products:</p>\n                        <ul>\n                            {order.products.map((product, index) => {\n                                const [productName, productId] = product.split(' (');\n                                const id = productId.slice(0, -1); // Remove closing parenthesis\n                                return (\n                                    <li key={index}>\n                                        <a href={`/product/${id}`}>{productName} ({id})</a>\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                        <p>Products: {order.productIDs.join(\", \")}</p>\n                    </div>\n                ))\n            ) : (\n                <p>No orders found.</p>\n            )}\n        </div>\n    );\n};\n\nexport default Orders;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}