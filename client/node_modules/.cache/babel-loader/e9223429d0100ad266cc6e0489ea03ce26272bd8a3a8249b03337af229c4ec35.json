{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Smiley\\\\Documents\\\\GitHub\\\\website_testing\\\\client\\\\src\\\\components\\\\ProtectedRoute.js\";\n// ProtectedRoute.js\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = () => {\n  const userInfo = JSON.parse(localStorage.getItem('userInfo')); // Assuming userInfo is stored in local storage\n  const isAuthenticated = Boolean(userInfo);\n  const isAdmin = isAuthenticated && userInfo.role === 'admin';\n\n  // Redirect based on role\n  if (isAuthenticated) {\n    if (isAdmin) {\n      // If user is admin, redirect to admin dashboard\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/admin\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 14\n      }, this);\n    }\n    // If user is not admin, proceed with rendering the child routes\n    return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If not authenticated, redirect to login\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","jsxDEV","_jsxDEV","ProtectedRoute","userInfo","JSON","parse","localStorage","getItem","isAuthenticated","Boolean","isAdmin","role","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Smiley/Documents/GitHub/website_testing/client/src/components/ProtectedRoute.js"],"sourcesContent":["// ProtectedRoute.js\r\nimport React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\n\r\nconst ProtectedRoute = () => {\r\n  const userInfo = JSON.parse(localStorage.getItem('userInfo')); // Assuming userInfo is stored in local storage\r\n  const isAuthenticated = Boolean(userInfo);\r\n  const isAdmin = isAuthenticated && userInfo.role === 'admin';\r\n\r\n  // Redirect based on role\r\n  if (isAuthenticated) {\r\n    if (isAdmin) {\r\n      // If user is admin, redirect to admin dashboard\r\n      return <Navigate to=\"/admin\" replace />;\r\n    }\r\n    // If user is not admin, proceed with rendering the child routes\r\n    return <Outlet />;\r\n  }\r\n\r\n  // If not authenticated, redirect to login\r\n  return <Navigate to=\"/login\" replace />;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EAC/D,MAAMC,eAAe,GAAGC,OAAO,CAACN,QAAQ,CAAC;EACzC,MAAMO,OAAO,GAAGF,eAAe,IAAIL,QAAQ,CAACQ,IAAI,KAAK,OAAO;;EAE5D;EACA,IAAIH,eAAe,EAAE;IACnB,IAAIE,OAAO,EAAE;MACX;MACA,oBAAOT,OAAA,CAACH,QAAQ;QAACc,EAAE,EAAC,QAAQ;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACzC;IACA;IACA,oBAAOhB,OAAA,CAACF,MAAM;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnB;;EAEA;EACA,oBAAOhB,OAAA,CAACH,QAAQ;IAACc,EAAE,EAAC,QAAQ;IAACC,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzC,CAAC;AAACC,EAAA,GAjBIhB,cAAc;AAmBpB,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}