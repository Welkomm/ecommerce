{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Smiley\\\\Documents\\\\GitHub\\\\website_testing\\\\client\\\\src\\\\components\\\\ProductList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductList = () => {\n  _s();\n  const [products, setProducts] = useState([]); // Assuming this will be fetched\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  useEffect(() => {\n    // Simulating a fetch operation\n    const fetchProducts = async () => {\n      // Replace this with your actual fetch call\n      const fetchedProducts = [{\n        id: 1,\n        name: 'Product A',\n        price: 100\n      }, {\n        id: 2,\n        name: 'Product B',\n        price: 150\n      }\n      // Add your products here\n      ];\n      setProducts(fetchedProducts);\n    };\n    fetchProducts();\n  }, [location]);\n  useEffect(() => {\n    var _searchParams$get;\n    const searchParams = new URLSearchParams(location.search);\n    const searchQuery = ((_searchParams$get = searchParams.get('search')) === null || _searchParams$get === void 0 ? void 0 : _searchParams$get.toLowerCase()) || '';\n    const filtered = products.filter(product => product.name.toLowerCase().includes(searchQuery));\n    setFilteredProducts(filtered);\n  }, [location, products]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: filteredProducts.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: product.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Price: $\", product.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }, this)]\n    }, product.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(ProductList, \"Y4ZYA3w8szcSp0PkLkmK/fdmM1E=\");\n_c = ProductList;\nexport default ProductList;\nvar _c;\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","ProductList","_s","products","setProducts","filteredProducts","setFilteredProducts","fetchProducts","fetchedProducts","id","name","price","location","_searchParams$get","searchParams","URLSearchParams","search","searchQuery","get","toLowerCase","filtered","filter","product","includes","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Smiley/Documents/GitHub/website_testing/client/src/components/ProductList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst ProductList = () => {\r\n    const [products, setProducts] = useState([]); // Assuming this will be fetched\r\n    const [filteredProducts, setFilteredProducts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Simulating a fetch operation\r\n        const fetchProducts = async () => {\r\n          // Replace this with your actual fetch call\r\n          const fetchedProducts = [\r\n            { id: 1, name: 'Product A', price: 100 },\r\n            { id: 2, name: 'Product B', price: 150 },\r\n            // Add your products here\r\n          ];\r\n          setProducts(fetchedProducts);\r\n        };\r\n\r\n        fetchProducts();\r\n    }, [location]);\r\n\r\n    useEffect(() => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const searchQuery = searchParams.get('search')?.toLowerCase() || '';\r\n\r\n        const filtered = products.filter(product =>\r\n          product.name.toLowerCase().includes(searchQuery)\r\n        );\r\n\r\n        setFilteredProducts(filtered);\r\n    }, [location, products]);\r\n\r\n    return (\r\n        <div>\r\n          {filteredProducts.map(product => (\r\n            <div key={product.id}>\r\n              <h2>{product.name}</h2>\r\n              <p>Price: ${product.price}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5DC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC;MACA,MAAMC,eAAe,GAAG,CACtB;QAAEC,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,WAAW;QAAEC,KAAK,EAAE;MAAI,CAAC,EACxC;QAAEF,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,WAAW;QAAEC,KAAK,EAAE;MAAI;MACvC;MAAA,CACD;MACDP,WAAW,CAACI,eAAe,CAAC;IAC9B,CAAC;IAEDD,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACK,QAAQ,CAAC,CAAC;EAEdf,SAAS,CAAC,MAAM;IAAA,IAAAgB,iBAAA;IACZ,MAAMC,YAAY,GAAG,IAAIC,eAAe,CAACH,QAAQ,CAACI,MAAM,CAAC;IACzD,MAAMC,WAAW,GAAG,EAAAJ,iBAAA,GAAAC,YAAY,CAACI,GAAG,CAAC,QAAQ,CAAC,cAAAL,iBAAA,uBAA1BA,iBAAA,CAA4BM,WAAW,CAAC,CAAC,KAAI,EAAE;IAEnE,MAAMC,QAAQ,GAAGjB,QAAQ,CAACkB,MAAM,CAACC,OAAO,IACtCA,OAAO,CAACZ,IAAI,CAACS,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACN,WAAW,CACjD,CAAC;IAEDX,mBAAmB,CAACc,QAAQ,CAAC;EACjC,CAAC,EAAE,CAACR,QAAQ,EAAET,QAAQ,CAAC,CAAC;EAExB,oBACIH,OAAA;IAAAwB,QAAA,EACGnB,gBAAgB,CAACoB,GAAG,CAACH,OAAO,iBAC3BtB,OAAA;MAAAwB,QAAA,gBACExB,OAAA;QAAAwB,QAAA,EAAKF,OAAO,CAACZ;MAAI;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACvB7B,OAAA;QAAAwB,QAAA,GAAG,UAAQ,EAACF,OAAO,CAACX,KAAK;MAAA;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFtBP,OAAO,CAACb,EAAE;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGf,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEd,CAAC;AAAC3B,EAAA,CAxCID,WAAW;AAAA6B,EAAA,GAAX7B,WAAW;AA0CjB,eAAeA,WAAW;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}