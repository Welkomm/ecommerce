{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Smiley\\\\Documents\\\\GitHub\\\\website_testing\\\\client\\\\src\\\\components\\\\Orders.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Orders.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Orders = () => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [productNames, setProductNames] = useState({});\n  useEffect(() => {\n    const fetchProductDetails = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/products');\n        const data = await response.json();\n        if (data.success && Array.isArray(data.products)) {\n          const names = data.products.reduce((acc, product) => {\n            acc[product.id] = product.name; // Ensure product.id is the correct key\n            return acc;\n          }, {});\n          setProductNames(names);\n        } else {\n          console.error(\"Unexpected format for products:\", data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching products:\", error);\n      }\n    };\n    fetchProductDetails();\n  }, []);\n  useEffect(() => {\n    const fetchOrders = async () => {\n      const username = localStorage.getItem(\"username\");\n      if (username) {\n        try {\n          const response = await fetch(`http://localhost:3000/orders/${username}`);\n          const data = await response.json();\n          if (data && Array.isArray(data)) {\n            const parsedOrders = data.map(order => {\n              // Assuming order.products is an array of strings [\"productId(quantity)\", ...]\n              const products = order.products.map(productString => {\n                // Check if productString is indeed a string\n                if (typeof productString === 'string') {\n                  const [productId, quantityWithParenthesis] = productString.split('(');\n                  if (quantityWithParenthesis) {\n                    const quantity = quantityWithParenthesis.slice(0, -1); // Remove closing parenthesis\n                    return {\n                      productId,\n                      quantity\n                    };\n                  }\n                }\n                return null; // Return null for items that don't match the expected format\n              }).filter(product => product !== null); // Filter out any nulls from the products array\n\n              return {\n                ...order,\n                products\n              };\n            });\n            setOrders(parsedOrders);\n          } else {\n            console.error(\"Unexpected response format for orders:\", data);\n          }\n        } catch (error) {\n          console.error(\"Error fetching orders:\", error);\n        }\n      }\n    };\n    if (Object.keys(productNames).length > 0) {\n      fetchOrders();\n    }\n  }, [productNames]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"orders-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"orders-header\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"back-to-home\",\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your Orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"orders-content\",\n      children: orders.length > 0 ? orders.map((order, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"order-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Order ID: \", order.orderID]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Order Date: \", order.orderDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Cost: \", order.price, \" AED\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", order.orderStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Address: \", order.orderAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Products:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: order.products.map((product, productIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [productNames[product.productId] || 'Unknown Product', \" - Quantity: \", product.quantity]\n          }, productIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No orders found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(Orders, \"wu3FhNMR05coXKaCi2/BdMQPfLQ=\");\n_c = Orders;\nexport default Orders;\nvar _c;\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","Orders","_s","orders","setOrders","productNames","setProductNames","fetchProductDetails","response","fetch","data","json","success","Array","isArray","products","names","reduce","acc","product","id","name","console","error","fetchOrders","username","localStorage","getItem","parsedOrders","map","order","productString","productId","quantityWithParenthesis","split","quantity","slice","filter","Object","keys","length","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","index","orderID","orderDate","price","orderStatus","orderAddress","productIndex","_c","$RefreshReg$"],"sources":["C:/Users/Smiley/Documents/GitHub/website_testing/client/src/components/Orders.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Orders.css';\n\nconst Orders = () => {\n    const [orders, setOrders] = useState([]);\n    const [productNames, setProductNames] = useState({});\n\n    useEffect(() => {\n        const fetchProductDetails = async () => {\n            try {\n                const response = await fetch('http://localhost:3000/products');\n                const data = await response.json();\n                if (data.success && Array.isArray(data.products)) {\n                    const names = data.products.reduce((acc, product) => {\n                        acc[product.id] = product.name; // Ensure product.id is the correct key\n                        return acc;\n                    }, {});\n                    setProductNames(names);\n                } else {\n                    console.error(\"Unexpected format for products:\", data);\n                }\n            } catch (error) {\n                console.error(\"Error fetching products:\", error);\n            }\n        };\n\n        fetchProductDetails();\n    }, []);\n\n    useEffect(() => {\n        const fetchOrders = async () => {\n            const username = localStorage.getItem(\"username\");\n            if (username) {\n                try {\n                    const response = await fetch(`http://localhost:3000/orders/${username}`);\n                    const data = await response.json();\n                    if (data && Array.isArray(data)) {\n                        const parsedOrders = data.map(order => {\n                            // Assuming order.products is an array of strings [\"productId(quantity)\", ...]\n                            const products = order.products.map(productString => {\n                                // Check if productString is indeed a string\n                                if (typeof productString === 'string') {\n                                    const [productId, quantityWithParenthesis] = productString.split('(');\n                                    if (quantityWithParenthesis) {\n                                        const quantity = quantityWithParenthesis.slice(0, -1); // Remove closing parenthesis\n                                        return { productId, quantity };\n                                    }\n                                }\n                                return null; // Return null for items that don't match the expected format\n                            }).filter(product => product !== null); // Filter out any nulls from the products array\n    \n                            return { ...order, products };\n                        });\n                        setOrders(parsedOrders);\n                    } else {\n                        console.error(\"Unexpected response format for orders:\", data);\n                    }\n                } catch (error) {\n                    console.error(\"Error fetching orders:\", error);\n                }\n            }\n        };\n    \n        if (Object.keys(productNames).length > 0) {\n            fetchOrders();\n        }\n    }, [productNames]);\n\n    return (\n        <div className=\"orders-container\">\n            <div className=\"orders-header\">\n                <Link to=\"/\" className=\"back-to-home\">Back to Home</Link>\n                <h1>Your Orders</h1>\n            </div>\n            <div className=\"orders-content\">\n                {orders.length > 0 ? (\n                    orders.map((order, index) => (\n                        <div key={index} className=\"order-item\">\n                            <h2>Order ID: {order.orderID}</h2>\n                            <p>Order Date: {order.orderDate}</p>\n                            <p>Total Cost: {order.price} AED</p>\n                            <p>Status: {order.orderStatus}</p>\n                            <p>Address: {order.orderAddress}</p>\n                            <p>Products:</p>\n                            <ul>\n                                {order.products.map((product, productIndex) => (\n                                    <li key={productIndex}>\n                                        {productNames[product.productId] || 'Unknown Product'} - Quantity: {product.quantity}\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    ))\n                ) : (\n                    <p>No orders found.</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Orders;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}